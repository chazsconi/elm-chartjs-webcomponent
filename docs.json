[{"name":"Chartjs.Chart","comment":" A type-safe bridge to a Chartjs web component.\n\nThis library requires both Chart.js and the web component to function properly.\nCheck the README.md for this package for more detailed instructions on setting up.\n\n@docs Chart, Type, defaultChart\n\n@docs setData, setOptions\n\n@docs chart, encodeChart\n\n","unions":[{"name":"Type","comment":" Basic type for a Chart\n\nFor charts containing multiple datasets, both a chart type needs to specified\nand a type for each dataset. Default Chart.js parameters will inherit from this type.\n\n","args":[],"cases":[["Bar",[]],["HorizontalBar",[]],["Line",[]],["Doughnut",[]],["Pie",[]],["Polar",[]]]}],"aliases":[{"name":"Chart","comment":" Main type helper for a Chartjs chart\n\nBoth a Data and an Options object must be specified to help configure this chart.\n\n","args":[],"type":"{ chartType : Chartjs.Chart.Type, data : Chartjs.Data.Data, options : Chartjs.Options.Options }"}],"values":[{"name":"chart","comment":" Given attributes and a chart, creates an HTML node using the web component\n\nChartJs is smart enough to figure out scaling naturally\nTo set the size of the chart, use CSS styles (either in a stylesheet or using the attributes)\n\n","type":"List.List (Html.Attribute msg) -> Chartjs.Chart.Chart -> Html.Html msg"},{"name":"defaultChart","comment":" Given a chart type, creates a default chart that can then be updated.\n","type":"Chartjs.Chart.Type -> Chartjs.Chart.Chart"},{"name":"encodeChart","comment":" Encodes the chart as json.  This is exposed to help debugging as you\ncan output it to the console or the UI.\n","type":"Chartjs.Chart.Chart -> Json.Encode.Value"},{"name":"setData","comment":" Update the data for a chart.\n","type":"Chartjs.Data.Data -> Chartjs.Chart.Chart -> Chartjs.Chart.Chart"},{"name":"setOptions","comment":" Update the options for a chart.\n","type":"Chartjs.Options.Options -> Chartjs.Chart.Chart -> Chartjs.Chart.Chart"}],"binops":[]},{"name":"Chartjs.Common","comment":" Common types used for various configuration properties\n\n@docs PointStyle, LineCap, LineJoin, Position, PointProperty\n\n","unions":[{"name":"LineCap","comment":" For more information, see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap>\n","args":[],"cases":[["LineCapButt",[]],["LineCapRound",[]],["LineCapSquare",[]]]},{"name":"LineJoin","comment":" For more information, see <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin>\n","args":[],"cases":[["LineJoinBevel",[]],["LineJoinRound",[]],["LineJoinMiter",[]]]},{"name":"PointProperty","comment":" Many properties that apply to datasets\ncan either be applied to the whole dataset, or to each individual point\n\nFor applying a property to every point in the dataset, use the All type\nFor using a list of properties on a per-point basis, use the PerPoint type\n\n","args":["a"],"cases":[["All",["a"]],["PerPoint",["List.List a"]]]},{"name":"PointStyle","comment":" For more information, see <https://www.chartjs.org/samples/latest/charts/line/point-styles.html>\n","args":[],"cases":[["Circle",[]],["Cross",[]],["CrossRot",[]],["Dash",[]],["Line",[]],["Rect",[]],["RectRounded",[]],["RectRot",[]],["Star",[]],["Triangle",[]],["Image",["String.String"]]]},{"name":"Position","comment":" Positioning often used in options such as axes and legends\n","args":[],"cases":[["Top",[]],["Left",[]],["Bottom",[]],["Right",[]]]}],"aliases":[],"values":[],"binops":[]},{"name":"Chartjs.Data","comment":" The Data type is used as a basic container for all the chart datasets,\nalong with the corresponding labels\n\n@docs DataSet, Data, defaultData\n\n@docs dataFromLabels, buildData, addDataset\n\n","unions":[{"name":"DataSet","comment":" Type wrapper for an individual dataset\n\nWhile this type should match the overall chart type,\nit is possible to put multiple types of dataset on one chart\n\n","args":[],"cases":[["BarData",["Chartjs.DataSets.Bar.DataSet"]],["LineData",["Chartjs.DataSets.Line.DataSet"]],["PieData",["Chartjs.DataSets.DoughnutAndPie.DataSet"]],["PolarData",["Chartjs.DataSets.Polar.DataSet"]]]}],"aliases":[{"name":"Data","comment":" All datasets for a chart are contained in a single Data object\nThis also specifies the category labels, which are shared across datasets\n(eg. multiple bar charts with the same categories)\n","args":[],"type":"{ labels : List.List String.String, datasets : List.List Chartjs.Data.DataSet }"}],"values":[{"name":"addDataset","comment":" Add a dataset to a Data object\nThis is very useful for use with the |> operator\n\n    defaultData\n        |> addDataset dataset1\n        |> addDataset dataset2\n\n","type":"Chartjs.Data.DataSet -> Chartjs.Data.Data -> Chartjs.Data.Data"},{"name":"buildData","comment":" Build a Data object from a list of labels and a list of datasets\n","type":"List.List String.String -> List.List Chartjs.Data.DataSet -> Chartjs.Data.Data"},{"name":"dataFromLabels","comment":" Data object with specified labels but no datasets\n","type":"List.List String.String -> Chartjs.Data.Data"},{"name":"defaultData","comment":" Data object with no labels or datasets defined\n","type":"Chartjs.Data.Data"}],"binops":[]},{"name":"Chartjs.DataSets.Bar","comment":" A bar chart provides a way of showing data values represented as vertical bars.\n\n@docs DataSet, defaultBarFromLabel, defaultBarFromData\n@docs setData, setXAxisID, setYAxisID, setBackgroundColor, setBorderColor, setBorderWidth, setBorderSkipped\n@docs setHoverBackgroundColor, setHoverBorderColor, setHoverBorderWidth\n\n","unions":[],"aliases":[{"name":"DataSet","comment":" For further information on these properties, see <https://www.chartjs.org/docs/latest/charts/bar.html>\n\nYou should not use the dataset type directly\nInstead use the updater pipeline functions:\n\n    defaultBarFromLabel \"Example\"\n        |> setBackgroundColor (Common.All Color.red)\n        |> setBorderColor (Common.All Color.white)\n\n","args":[],"type":"{ label : String.String, data : List.List Basics.Float, xAxisID : Maybe.Maybe String.String, yAxisID : Maybe.Maybe String.String, backgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), borderSkipped : Maybe.Maybe String.String, hoverBackgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float) }"}],"values":[{"name":"defaultBarFromData","comment":" Create a Bar dataset with a label and data\n","type":"String.String -> List.List Basics.Float -> Chartjs.DataSets.Bar.DataSet"},{"name":"defaultBarFromLabel","comment":" Create a Bar dataset with just a label\n","type":"String.String -> Chartjs.DataSets.Bar.DataSet"},{"name":"setBackgroundColor","comment":" Fill color of the bar\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setBorderColor","comment":" Border color of the bar\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setBorderSkipped","comment":" Which edge to skip drawing border for\nOne of: 'bottom' 'left' 'top' 'right'\n","type":"String.String -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setBorderWidth","comment":" Stroke width of the bar in pixels\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setData","comment":" Set the data displayed by this dataset\nThis is a list of floats, where each float is represented as a bar\n","type":"List.List Basics.Float -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setHoverBackgroundColor","comment":" Fill color of the bar when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setHoverBorderColor","comment":" Border color of the bar when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setHoverBorderWidth","comment":" Border width of the bar when hovered\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setXAxisID","comment":" The ID of the X axis to plot the dataset on\n","type":"String.String -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"},{"name":"setYAxisID","comment":" The ID of the Y axis to plot the dataset on\n","type":"String.String -> Chartjs.DataSets.Bar.DataSet -> Chartjs.DataSets.Bar.DataSet"}],"binops":[]},{"name":"Chartjs.DataSets.DoughnutAndPie","comment":" Pie and doughnut charts are divided into segments, where the arc of each segment shows the proportion of each data.\n\nIn Chart.js, these two charts are essentially the same. The only different value is the cutoutPercentage.\nThis dataset class will work for either pie or doughtnut charts interchangably\n\n@docs DataSet, defaultPieFromLabel, defaultPieFromData\n@docs setData, setBackgroundColor, setBorderAlign, setBorderColor, setBorderWidth\n@docs setHoverBackgroundColor, setHoverBorderColor, setHoverBorderWidth\n\n","unions":[],"aliases":[{"name":"DataSet","comment":" For further information on these properties, see <https://www.chartjs.org/docs/latest/charts/doughnut.html>\n\nYou should not use the dataset type directly\nInstead use the updater pipeline functions:\n\n    defaultBarFromLabel \"Example\"\n        |> setBackgroundColor (Common.All Color.red)\n        |> setBorderColor (Common.All Color.white)\n\n","args":[],"type":"{ label : String.String, data : List.List Basics.Float, backgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderAlign : Maybe.Maybe String.String, borderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), hoverBackgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float) }"}],"values":[{"name":"defaultPieFromData","comment":" Create a Pie dataset with a label and data\n","type":"String.String -> List.List Basics.Float -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"defaultPieFromLabel","comment":" Create a Pie dataset with just a label\n","type":"String.String -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setBackgroundColor","comment":" Fill color of the arcs\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setBorderAlign","comment":" Whether the borders of each arc should overlap or not\nSet to 'center' to overlap\nSet to 'inner' to not overlap\n","type":"String.String -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setBorderColor","comment":" Color of the border\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setBorderWidth","comment":" Width of the border\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setData","comment":" Set the data displayed by this dataset\nThis is a list of floats, where each float is represented as an arc\n","type":"List.List Basics.Float -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setHoverBackgroundColor","comment":" Fill color of the arcs when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setHoverBorderColor","comment":" Border color of the arcs when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"},{"name":"setHoverBorderWidth","comment":" Width of the border when hovered\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.DoughnutAndPie.DataSet -> Chartjs.DataSets.DoughnutAndPie.DataSet"}],"binops":[]},{"name":"Chartjs.DataSets.Line","comment":" A line chart plots data points on a line. Often used to show trend data or compare data sets.\n\nThis dataset class can handle categorical scatter charts and area charts as well as standard line charts.\nFor categorical scatter charts, set showLine to be False\nFor area datasets, ensure that the fill mode is enabled and a background color is set\n\n@docs DataSet, defaultLineFromLabel, defaultLineFromData, defaultLineFromPointData\n@docs SteppedLine, FillMode, FillBoundary\n@docs setData, setXAxisID, setYAxisID, setBackgroundColor\n@docs setBorderColor, setBorderWidth, setBorderDash, setBorderDashOffset, setBorderCapStyle, setBorderJoinStyle\n@docs setColor, setCubicInterpolationMode, setFill, setLineTension\n@docs setPointBackgroundColor, setPointBorderColor, setPointBorderWidth, setPointRadius, setPointStyle, setPointRotation, setPointHitRadius\n@docs setPointHoverBackgroundColor, setPointHoverBorderColor, setPointHoverBorderWidth, setPointHoverRadius\n@docs setShowLine, setSpanGaps, setSteppedLine\n@docs DataItems\n","unions":[{"name":"DataItems","comment":" DataItems can either be numbers in which case the x-axis is generally a category specified via labels.\nFor a scatter chart, a list of points is given.\nSee <https://www.chartjs.org/docs/latest/charts/line.html#data-structure>\n","args":[],"cases":[["Numbers",["List.List Basics.Float"]],["Points",["List.List ( Basics.Float, Basics.Float )"]]]},{"name":"FillBoundary","comment":" Which boundary to use when using FillBoundary\nCan be the scale origin, start, or end\n","args":[],"cases":[["Start",[]],["End",[]],["Origin",[]]]},{"name":"FillMode","comment":" Fill modes handle how area charts should be displayed\nCan be:\n\n  - an absolute dataset index\n  - a relative dataset index\n  - between the dataset and the boundaries\n\n","args":[],"cases":[["Absolute",["Basics.Int"]],["Relative",["Basics.Int"]],["Boundary",["Chartjs.DataSets.Line.FillBoundary"]],["Disabled",[]]]},{"name":"SteppedLine","comment":" Step Interpolation for lines\n\nBeforeInterpolation: Step-before Interpolation\nAfterInterpolation: Step-after Interpolation\n\n","args":[],"cases":[["NoInterpolation",[]],["BeforeInterpolation",[]],["AfterInterpolation",[]]]}],"aliases":[{"name":"DataSet","comment":" For further information on these properties, see <https://www.chartjs.org/docs/latest/charts/line.html>\n\nYou should not use the dataset type directly\nInstead use the updater pipeline functions:\n\n    defaultBarFromLabel \"Example\"\n        |> setBackgroundColor (Common.All Color.red)\n        |> setBorderColor (Common.All Color.white)\n        |> setBorderCapStyle \"round\"\n        |> setFill Disabled\n\n","args":[],"type":"{ label : String.String, data : Chartjs.DataSets.Line.DataItems, xAxisID : Maybe.Maybe String.String, yAxisID : Maybe.Maybe String.String, backgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), borderDash : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), borderDashOffset : Maybe.Maybe Basics.Float, borderCapStyle : Maybe.Maybe String.String, borderJoinStyle : Maybe.Maybe String.String, color : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), cubicInterpolationMode : Maybe.Maybe String.String, fill : Maybe.Maybe Chartjs.DataSets.Line.FillMode, lineTension : Maybe.Maybe Basics.Float, pointBackgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), pointBorderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), pointBorderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), pointRadius : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), pointStyle : Maybe.Maybe (Chartjs.Common.PointProperty Chartjs.Common.PointStyle), pointRotation : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), pointHitRadius : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), pointHoverBackgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), pointHoverBorderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), pointHoverBorderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), pointHoverRadius : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), showLine : Maybe.Maybe Basics.Bool, spanGaps : Maybe.Maybe Basics.Bool, steppedLine : Maybe.Maybe Chartjs.DataSets.Line.SteppedLine }"}],"values":[{"name":"defaultLineFromData","comment":" Create a Line dataset with a label and data\n","type":"String.String -> List.List Basics.Float -> Chartjs.DataSets.Line.DataSet"},{"name":"defaultLineFromLabel","comment":" Create a Line dataset with just a label\n","type":"String.String -> Chartjs.DataSets.Line.DataSet"},{"name":"defaultLineFromPointData","comment":" Create a Line dataset from point data\n","type":"String.String -> List.List ( Basics.Float, Basics.Float ) -> Chartjs.DataSets.Line.DataSet"},{"name":"setBackgroundColor","comment":" Fill color of the area under the bar\nApplies for area charts\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderCapStyle","comment":" Cap style of the line\n","type":"String.String -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderColor","comment":" Color of the line\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderDash","comment":" Length and spacing of line dashes\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderDashOffset","comment":" Offset for line dashes\n","type":"Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderJoinStyle","comment":" Joint style of the line\n","type":"String.String -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setBorderWidth","comment":" Line width (in pixels)\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setColor","comment":" Color of the line\nApplies for area charts\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setCubicInterpolationMode","comment":" Which cubic interpolation mode to use\n'default' uses a weighted cubic interpolation\n'monotone' is better at preserving monotonicity\n","type":"String.String -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setData","comment":" Set the data displayed by this dataset\nThis is a list of floats, where each float is represented as a point on the line\n","type":"List.List Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setFill","comment":" How to fill the area under the line\n","type":"Chartjs.DataSets.Line.FillMode -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setLineTension","comment":" Beizer curve tension\n0 is straight lines\n\nThis option is ignored if cubicInterpolation is set to 'monotone'\n\n","type":"Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointBackgroundColor","comment":" Fill color for points\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointBorderColor","comment":" Border color for points\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointBorderWidth","comment":" Border width (in pixels) for points\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointHitRadius","comment":" Hit radius for point interactivity\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointHoverBackgroundColor","comment":" Fill color for points when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointHoverBorderColor","comment":" Border color for points when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointHoverBorderWidth","comment":" Border width for points when hovered\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointHoverRadius","comment":" Radius for points when hovered\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointRadius","comment":" Radius of the point shape\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointRotation","comment":" Rotation of the point (in degrees)\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setPointStyle","comment":" Style of the point\n","type":"Chartjs.Common.PointProperty Chartjs.Common.PointStyle -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setShowLine","comment":" Whether the line for this dataset should be drawn\n","type":"Basics.Bool -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setSpanGaps","comment":" Whether points with no data should be filled in or not\n","type":"Basics.Bool -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setSteppedLine","comment":" Set the step interpolation for the line\n\nIf set to anything other than false, lineTension will be ignored\n\n","type":"Chartjs.DataSets.Line.SteppedLine -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setXAxisID","comment":" The ID of the X axis to plot this dataset on\n","type":"String.String -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"},{"name":"setYAxisID","comment":" The ID of the Y axis to plot this dataset on\n","type":"String.String -> Chartjs.DataSets.Line.DataSet -> Chartjs.DataSets.Line.DataSet"}],"binops":[]},{"name":"Chartjs.DataSets.Polar","comment":" Polar charts are similar to pie charts, but each segment has the same angle\n\n  - the radius of the segment differs depending on the value.\n\n@docs DataSet, defaultPolarFromLabel, defaultPolarFromData\n@docs setData, setBackgroundColor, setBorderAlign, setBorderColor, setBorderWidth, setHoverBackgroundColor, setHoverBorderColor, setHoverBorderWidth\n\n","unions":[],"aliases":[{"name":"DataSet","comment":" For further information on these properties, see <https://www.chartjs.org/docs/latest/charts/polar.html>\n\nYou should not use the dataset type directly\nInstead use the updater pipeline functions:\n\n    defaultBarFromLabel \"Example\"\n        |> setBackgroundColor (Common.All Color.red)\n        |> setBorderColor (Common.All Color.white)\n\n","args":[],"type":"{ label : String.String, data : List.List Basics.Float, backgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderAlign : Maybe.Maybe String.String, borderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), borderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float), hoverBackgroundColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderColor : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color), hoverBorderWidth : Maybe.Maybe (Chartjs.Common.PointProperty Basics.Float) }"}],"values":[{"name":"defaultPolarFromData","comment":" Create a Polar dataset with a label and data\n","type":"String.String -> List.List Basics.Float -> Chartjs.DataSets.Polar.DataSet"},{"name":"defaultPolarFromLabel","comment":" Create a Polar dataset with just a label\n","type":"String.String -> Chartjs.DataSets.Polar.DataSet"},{"name":"setBackgroundColor","comment":" Fill color of the segments\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setBorderAlign","comment":" Whether the borders of each segment should overlap or not\nSet to 'center' to overlap\nSet to 'inner' to not overlap\n","type":"String.String -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setBorderColor","comment":" Color of the border\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setBorderWidth","comment":" Width of the border\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setData","comment":" Set the data displayed by this dataset\nThis is a list of floats, where each float is represented as a segment on the chart\n","type":"List.List Basics.Float -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setHoverBackgroundColor","comment":" Fill color of the segments when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setHoverBorderColor","comment":" Border color of the segements when hovered\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"},{"name":"setHoverBorderWidth","comment":" Width of the border when hovered\n","type":"Chartjs.Common.PointProperty Basics.Float -> Chartjs.DataSets.Polar.DataSet -> Chartjs.DataSets.Polar.DataSet"}],"binops":[]},{"name":"Chartjs.Options","comment":" The Options type is used for configuring how the chart behaves\nThis contains properties to control things like styling, fonts, etc.\n\n@docs Options, defaultOptions\n\n@docs setAnimations, setElements, setLayout, setLegend, setMaintainAspectRatio, setResponsive, setScales, setTitle, setTooltips, setAspectRatio\n\n","unions":[],"aliases":[{"name":"Options","comment":" These options are applied to the whole chart and not an individual dataset\n","args":[],"type":"{ animations : Maybe.Maybe Chartjs.Options.Animations.Animations, layout : Maybe.Maybe Chartjs.Options.Layout.Layout, legend : Maybe.Maybe Chartjs.Options.Legend.Legend, title : Maybe.Maybe Chartjs.Options.Title.Title, tooltips : Maybe.Maybe Chartjs.Options.Tooltips.Tooltips, elements : Maybe.Maybe Chartjs.Options.Elements.Elements, scales : Maybe.Maybe Chartjs.Options.Scales.Scales, maintainAspectRatio : Maybe.Maybe Basics.Bool, responsive : Maybe.Maybe Basics.Bool, cutoutPercentage : Maybe.Maybe Basics.Int, rotation : Maybe.Maybe Basics.Float, circumference : Maybe.Maybe Basics.Float, aspectRatio : Maybe.Maybe Basics.Float }"}],"values":[{"name":"defaultOptions","comment":" Creates a blank options structure which can then be edited using the below set functions\n","type":"Chartjs.Options.Options"},{"name":"setAnimations","comment":" Set the animations property\n","type":"Chartjs.Options.Animations.Animations -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setAspectRatio","comment":" Set the aspect ratio\n","type":"Basics.Float -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setElements","comment":" Set the elements property\n","type":"Chartjs.Options.Elements.Elements -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setLayout","comment":" Set the layout property\n","type":"Chartjs.Options.Layout.Layout -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setLegend","comment":" Set the legend property\n","type":"Chartjs.Options.Legend.Legend -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setMaintainAspectRatio","comment":" Set whether to keep the aspect ratio of this chart consistent\n","type":"Basics.Bool -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setResponsive","comment":" Set whether this chart should be responsive\nNote: there is currently no parameters to directly set the width and hieght of the chart\nI strongly recommend sizing the parent web component and leaving this option enabled\n","type":"Basics.Bool -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setScales","comment":" Set the scales property\n","type":"Chartjs.Options.Scales.Scales -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setTitle","comment":" Set the title property\n","type":"Chartjs.Options.Title.Title -> Chartjs.Options.Options -> Chartjs.Options.Options"},{"name":"setTooltips","comment":" Set the tootlips property\n","type":"Chartjs.Options.Tooltips.Tooltips -> Chartjs.Options.Options -> Chartjs.Options.Options"}],"binops":[]},{"name":"Chartjs.Options.Animations","comment":" These options are provided to help configure how the animation functions\nBy default, the chart should automatically animate updates good enough for most use cases\n\nFor more information, see <https://www.chartjs.org/docs/latest/configuration/animations.html>\n\n@docs Animations, defaultAnimations\n@docs Easing, setEasing\n@docs setDuration, setAnimateRotate, setAnimateScale\n\n","unions":[{"name":"Easing","comment":" Different easings for animations\nTo see examples of these easings, see <https://easings.net>\n","args":[],"cases":[["EaseLinear",[]],["EaseInQuad",[]],["EaseOutQuad",[]],["EaseInOutQuad",[]],["EaseInCubic",[]],["EaseOutCubic",[]],["EaseInOutCubic",[]],["EaseInQuart",[]],["EaseOutQuart",[]],["EaseInOutQuart",[]],["EaseInQuint",[]],["EaseOutQuint",[]],["EaseInOutQuint",[]],["EaseInSine",[]],["EaseOutSine",[]],["EaseInOutSine",[]],["EaseInExpo",[]],["EaseOutExpo",[]],["EaseInOutExpo",[]],["EaseInCirc",[]],["EaseOutCirc",[]],["EaseInOutCirc",[]],["EaseInElastic",[]],["EaseOutElastic",[]],["EaseInOutElastic",[]],["EaseInBack",[]],["EaseOutBack",[]],["EaseInOutBack",[]],["EaseInBounce",[]],["EaseOutBounce",[]],["EaseInOutBounce",[]]]}],"aliases":[{"name":"Animations","comment":" Animations structure\nThese settings will apply to all the animations in the chart\n\nThe default settings should work fine for most cases, but if needed,\nyou can use this object to fine-tune them\n\n","args":[],"type":"{ duration : Maybe.Maybe Basics.Int, easing : Maybe.Maybe Chartjs.Options.Animations.Easing, animateRotate : Maybe.Maybe Basics.Bool, animateScale : Maybe.Maybe Basics.Bool }"}],"values":[{"name":"defaultAnimations","comment":" Create a blank animations object\n","type":"Chartjs.Options.Animations.Animations"},{"name":"setAnimateRotate","comment":" Used for Pie charts\nShould the rotation of the chart be animated?\n","type":"Basics.Bool -> Chartjs.Options.Animations.Animations -> Chartjs.Options.Animations.Animations"},{"name":"setAnimateScale","comment":" Used for Pie/Polar charts\nShould the scaling of the chart be animated?\n","type":"Basics.Bool -> Chartjs.Options.Animations.Animations -> Chartjs.Options.Animations.Animations"},{"name":"setDuration","comment":" Time (in milliseconds) an animation takes\n","type":"Basics.Int -> Chartjs.Options.Animations.Animations -> Chartjs.Options.Animations.Animations"},{"name":"setEasing","comment":" Easing function to use\n","type":"Chartjs.Options.Animations.Easing -> Chartjs.Options.Animations.Animations -> Chartjs.Options.Animations.Animations"}],"binops":[]},{"name":"Chartjs.Options.Elements","comment":" While there is ways to configure the styling of each dataset, sometimes you want custom styles applied to all datasets\nFor more information, see <https://www.chartjs.org/docs/latest/configuration/elements.html>\n\nPlease note that this module does not have updater functions and you will need to use record update syntax if using this functionality\n\n@docs Elements, defaultElements, Point, defaultPoint, Line, LineFill, Rectangle, Arc\n\n","unions":[{"name":"LineFill","comment":" Line fill mode\nUseful for area charts\n","args":[],"cases":[["Zero",[]],["Top",[]],["Bottom",[]],["NoFill",[]]]}],"aliases":[{"name":"Arc","comment":" Arc specific properties (eg. pie chart, polar chart)\n","args":[],"type":"{ backgroundColor : Maybe.Maybe Color.Color, borderColor : Maybe.Maybe Color.Color, borderWidth : Maybe.Maybe Basics.Int }"},{"name":"Elements","comment":" Controls for all element types in a chart\n","args":[],"type":"{ point : Maybe.Maybe Chartjs.Options.Elements.Point, line : Maybe.Maybe Chartjs.Options.Elements.Line, rectangle : Maybe.Maybe Chartjs.Options.Elements.Rectangle, arc : Maybe.Maybe Chartjs.Options.Elements.Arc }"},{"name":"Line","comment":" Line specific properties\n","args":[],"type":"{ tension : Maybe.Maybe Basics.Float, backgroundColor : Maybe.Maybe Color.Color, borderWidth : Maybe.Maybe Basics.Int, borderColor : Maybe.Maybe Color.Color, borderCapStyle : Maybe.Maybe Chartjs.Common.LineCap, borderDash : Maybe.Maybe (List.List Basics.Int), borderDashOffset : Maybe.Maybe Basics.Int, borderJoinStyle : Maybe.Maybe Chartjs.Common.LineJoin, capBezierPoints : Maybe.Maybe Basics.Bool, fill : Maybe.Maybe Chartjs.Options.Elements.LineFill, stepped : Maybe.Maybe Basics.Bool }"},{"name":"Point","comment":" Point specific properties\n","args":[],"type":"{ radius : Maybe.Maybe Basics.Int, pointStyle : Maybe.Maybe Chartjs.Common.PointStyle, rotation : Maybe.Maybe Basics.Int, backgroundColor : Maybe.Maybe Color.Color, borderWidth : Maybe.Maybe Basics.Int, borderColor : Maybe.Maybe Color.Color, hitRadius : Maybe.Maybe Basics.Int, hoverRadius : Maybe.Maybe Basics.Int, hoverBorderWidth : Maybe.Maybe Basics.Int }"},{"name":"Rectangle","comment":" Rectangle specific properties (eg. bar charts)\n","args":[],"type":"{ backgroundColor : Maybe.Maybe Color.Color, borderWidth : Maybe.Maybe Basics.Int, borderColor : Maybe.Maybe Color.Color, borderSkipped : Maybe.Maybe Chartjs.Common.Position }"}],"values":[{"name":"defaultElements","comment":" Create a blank elements object\n","type":"Chartjs.Options.Elements.Elements"},{"name":"defaultPoint","comment":" Create a blank point object\n","type":"Chartjs.Options.Elements.Point"}],"binops":[]},{"name":"Chartjs.Options.Layout","comment":" For more information, see <https://www.chartjs.org/docs/latest/configuration/layout.html>\n\n@docs Layout\n\n","unions":[{"name":"Layout","comment":" Controls the amount of padding inside the chart\nBy default, this is 0 on all sides\n\nThis can be set as either Uniform (applied to all sides)\nor Specific (different paddings for each side)\n\n","args":[],"cases":[["Uniform",["Basics.Int"]],["Specific",["{ left : Basics.Int, right : Basics.Int, top : Basics.Int, bottom : Basics.Int }"]]]}],"aliases":[],"values":[],"binops":[]},{"name":"Chartjs.Options.Legend","comment":" For more information, see <https://www.chartjs.org/docs/latest/configuration/legend.html>\n\n@docs Legend, defaultLegend\n\n@docs setDisplay, setPosition, setFullWidth, setReverse, setLabels\n\n@docs Labels, defaultLabels, setBoxWidth, setFontSize, setFontStyle, setFontColor, setFontFamily, setPadding, setUsePointStyle\n\n","unions":[],"aliases":[{"name":"Labels","comment":" Properties for the labels that make up the legend\n","args":[],"type":"{ boxWidth : Maybe.Maybe Basics.Int, fontSize : Maybe.Maybe Basics.Int, fontStyle : Maybe.Maybe String.String, fontColor : Maybe.Maybe Color.Color, fontFamily : Maybe.Maybe String.String, padding : Maybe.Maybe Basics.Int, usePointStyle : Maybe.Maybe Basics.Bool }"},{"name":"Legend","comment":" The chart legend displays data about the datasets that are appearing on the chart\n","args":[],"type":"{ display : Maybe.Maybe Basics.Bool, position : Maybe.Maybe Chartjs.Common.Position, fullWidth : Maybe.Maybe Basics.Bool, reverse : Maybe.Maybe Basics.Bool, labels : Maybe.Maybe Chartjs.Options.Legend.Labels }"}],"values":[{"name":"defaultLabels","comment":" Create a blank labels object that can then be updated with the below functions\n","type":"Chartjs.Options.Legend.Labels"},{"name":"defaultLegend","comment":" Create a blank legend object that can then be updated with the below functions\n","type":"Chartjs.Options.Legend.Legend"},{"name":"setBoxWidth","comment":" Width of the coloured box\n","type":"Basics.Int -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setDisplay","comment":" Is the legend shown?\n","type":"Basics.Bool -> Chartjs.Options.Legend.Legend -> Chartjs.Options.Legend.Legend"},{"name":"setFontColor","comment":" Color of the label text\n","type":"Color.Color -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setFontFamily","comment":" Font family to use for label text\n","type":"String.String -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setFontSize","comment":" Font size of the label text\n","type":"Basics.Int -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setFontStyle","comment":" Font style of the label text (normal, bold, etc.)\n","type":"String.String -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setFullWidth","comment":" Marks that this box should take the full width of the canvas (pushing down other boxes).\nThis is unlikely to need to be changed in day-to-day use.\n","type":"Basics.Bool -> Chartjs.Options.Legend.Legend -> Chartjs.Options.Legend.Legend"},{"name":"setLabels","comment":" Set properties for the labels of this legend\n","type":"Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Legend -> Chartjs.Options.Legend.Legend"},{"name":"setPadding","comment":" Padding between rows of coloured boxes\n","type":"Basics.Int -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"},{"name":"setPosition","comment":" Position of the legend (relative to the chart)\n","type":"Chartjs.Common.Position -> Chartjs.Options.Legend.Legend -> Chartjs.Options.Legend.Legend"},{"name":"setReverse","comment":" Legend will show datasets in reverse order\n","type":"Basics.Bool -> Chartjs.Options.Legend.Legend -> Chartjs.Options.Legend.Legend"},{"name":"setUsePointStyle","comment":" Label style will match corresponding point style\n","type":"Basics.Bool -> Chartjs.Options.Legend.Labels -> Chartjs.Options.Legend.Labels"}],"binops":[]},{"name":"Chartjs.Options.Scales","comment":" Axes are an integral part of a chart.\n\nSo far, this module only implements simple axis properties.\nPlanned features soon will include implementing the Cartesian & Radial axes listed in the Chart.js documentation\n\nFor more information, see <https://www.chartjs.org/docs/latest/axes/>\n\n@docs Scales, defaultScales, scalesFromAxes\n@docs Axis, defaultAxis\n@docs setPosition, setStacked, setTicks, setGridLines, setID\n@docs AxisType, setType\n\n@docs Ticks, defaultTicks\n@docs setFontFamily, setBeginAtZero, setMin, setMax, setMaxTicksLimit, setPrecision\n@docs setStepSize, setSuggestedMax, setSuggestedMin, setFontColor\n\n@docs GridLines, defaultGridLines\n@docs setDisplay, setColor\n\n@docs ScaleLabel, defaultScaleLabel\n@docs setLabelString, setScaleLabel\n\n","unions":[{"name":"AxisType","comment":" Axis type config\n","args":[],"cases":[["Linear",[]],["Logarithmic",[]],["Category",[]],["Time",[]]]}],"aliases":[{"name":"Axis","comment":" A single axis for a chart\n","args":[],"type":"{ id : Maybe.Maybe String.String, position : Maybe.Maybe Chartjs.Common.Position, stacked : Maybe.Maybe Basics.Bool, ticks : Maybe.Maybe Chartjs.Options.Scales.Ticks, gridLines : Maybe.Maybe Chartjs.Options.Scales.GridLines, type_ : Maybe.Maybe Chartjs.Options.Scales.AxisType, scaleLabel : Maybe.Maybe Chartjs.Options.Scales.ScaleLabel }"},{"name":"GridLines","comment":" Create an empty grid lines object\nFor more information, see <https://www.chartjs.org/docs/latest/axes/styling.html#grid-line-configuration>\n","args":[],"type":"{ display : Maybe.Maybe Basics.Bool, color : Maybe.Maybe (Chartjs.Common.PointProperty Color.Color) }"},{"name":"ScaleLabel","comment":" Create an scale label object\n","args":[],"type":"{ display : Maybe.Maybe Basics.Bool, labelString : Maybe.Maybe String.String }"},{"name":"Scales","comment":" Container for all axes of a chart\n","args":[],"type":"{ xAxes : List.List Chartjs.Options.Scales.Axis, yAxes : List.List Chartjs.Options.Scales.Axis }"},{"name":"Ticks","comment":" Type structure for a single axes\nThis currently only supports standard linear Cartesian axes.\n\nFor more information, see <https://www.chartjs.org/docs/latest/axes/cartesian/>\n\n","args":[],"type":"{ fontFamily : Maybe.Maybe String.String, callback : Maybe.Maybe String.String, beginAtZero : Maybe.Maybe Basics.Bool, min : Maybe.Maybe Basics.Float, max : Maybe.Maybe Basics.Float, maxTicksLimit : Maybe.Maybe Basics.Int, precision : Maybe.Maybe Basics.Int, stepSize : Maybe.Maybe Basics.Float, suggestedMax : Maybe.Maybe Basics.Float, suggestedMin : Maybe.Maybe Basics.Float, fontColor : Maybe.Maybe Color.Color }"}],"values":[{"name":"defaultAxis","comment":" Create an empty axis object\n","type":"Chartjs.Options.Scales.Axis"},{"name":"defaultGridLines","comment":" Create an empty grid lines object\n","type":"Chartjs.Options.Scales.GridLines"},{"name":"defaultScaleLabel","comment":" Create an empty grid lines object\n","type":"Chartjs.Options.Scales.ScaleLabel"},{"name":"defaultScales","comment":" Create an empty scales object\n","type":"Chartjs.Options.Scales.Scales"},{"name":"defaultTicks","comment":" Create an empty ticks object\n","type":"Chartjs.Options.Scales.Ticks"},{"name":"scalesFromAxes","comment":" Build a scales object from a list of axes\n","type":"List.List Chartjs.Options.Scales.Axis -> List.List Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Scales"},{"name":"setBeginAtZero","comment":" If true, scale will include 0 (if it is not already included)\n","type":"Basics.Bool -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setColor","comment":" Color to use for grid lines\n","type":"Chartjs.Common.PointProperty Color.Color -> Chartjs.Options.Scales.GridLines -> Chartjs.Options.Scales.GridLines"},{"name":"setDisplay","comment":" Whether grid lines should be displayed\n","type":"Basics.Bool -> Chartjs.Options.Scales.GridLines -> Chartjs.Options.Scales.GridLines"},{"name":"setFontColor","comment":" Font color to use for ticks\n","type":"Color.Color -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setFontFamily","comment":" Font family to use for ticks\n","type":"String.String -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setGridLines","comment":" Grid line configuration\n","type":"Chartjs.Options.Scales.GridLines -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setID","comment":" ID of the axis\n","type":"String.String -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setLabelString","comment":" Sets the label string and makes it visible\n","type":"String.String -> Chartjs.Options.Scales.ScaleLabel -> Chartjs.Options.Scales.ScaleLabel"},{"name":"setMax","comment":" Defined maximum value,\noverrides value from data\n","type":"Basics.Float -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setMaxTicksLimit","comment":" Maximum number of ticks and grid lines to show\n","type":"Basics.Int -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setMin","comment":" Defined minimum value,\noverrides value from data\n","type":"Basics.Float -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setPosition","comment":" Position of the axis in the chart\n","type":"Chartjs.Common.Position -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setPrecision","comment":" If defined and stepSize is not specified,\nthen the step size will be rounded to this many decimal places\n","type":"Basics.Int -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setScaleLabel","comment":" Scale label config\n","type":"Chartjs.Options.Scales.ScaleLabel -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setStacked","comment":" ¯\\\\\\_(ツ)\\_/¯\n","type":"Basics.Bool -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setStepSize","comment":" Set a defined fixed step size for the scale\n","type":"Basics.Float -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setSuggestedMax","comment":" Adjustment used when calculating the maximum data value\n","type":"Basics.Float -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setSuggestedMin","comment":" Adjust used when calculating the minimum data value\n","type":"Basics.Float -> Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Ticks"},{"name":"setTicks","comment":" Tick configuration\n","type":"Chartjs.Options.Scales.Ticks -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"},{"name":"setType","comment":" Set Axis type\n","type":"Chartjs.Options.Scales.AxisType -> Chartjs.Options.Scales.Axis -> Chartjs.Options.Scales.Axis"}],"binops":[]},{"name":"Chartjs.Options.Title","comment":" For more information, see <https://www.chartjs.org/docs/latest/configuration/title.html>\n\n@docs Title, defaultTitle\n@docs setDisplay, setPosition, setFontSize, setFontFamily, setFontColor, setFontStyle, setPadding, setLineHeight, setText\n\n","unions":[],"aliases":[{"name":"Title","comment":" The Title is text that is drawn outside of the Chart\n","args":[],"type":"{ display : Maybe.Maybe Basics.Bool, position : Maybe.Maybe Chartjs.Common.Position, fontSize : Maybe.Maybe Basics.Int, fontFamily : Maybe.Maybe String.String, fontColor : Maybe.Maybe Color.Color, fontStyle : Maybe.Maybe String.String, padding : Maybe.Maybe Basics.Int, lineHeight : Maybe.Maybe String.String, text : Maybe.Maybe String.String }"}],"values":[{"name":"defaultTitle","comment":" Create a blank title object\n","type":"Chartjs.Options.Title.Title"},{"name":"setDisplay","comment":" Is the title shown?\n","type":"Basics.Bool -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setFontColor","comment":" Font color for the title text\n","type":"Color.Color -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setFontFamily","comment":" Font family for the title text\n","type":"String.String -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setFontSize","comment":" Size of the title text\n","type":"Basics.Int -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setFontStyle","comment":" Font style for the title text\neg. normal, bold, italic\n","type":"String.String -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setLineHeight","comment":" Height of each individual line of text\nSee <https://developer.mozilla.org/en-US/docs/Web/CSS/line-height>\n","type":"String.String -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setPadding","comment":" Padding (in pixels) above and below the title text\n","type":"Basics.Int -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setPosition","comment":" Position of the title\n","type":"Chartjs.Common.Position -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"},{"name":"setText","comment":" Title text to be displayed\n","type":"String.String -> Chartjs.Options.Title.Title -> Chartjs.Options.Title.Title"}],"binops":[]},{"name":"Chartjs.Options.Tooltips","comment":" For more information, see <https://www.chartjs.org/docs/latest/configuration/tooltip.html>\n\nPlease note that this module does not have updater functions and you will need to use record update syntax if using this functionality\n\n@docs Tooltips, defaultTooltips\n\n@docs PositionMode, Mode\n\n","unions":[{"name":"Mode","comment":" Controls what elements are displayed in the tooltip\nPoint: finds all items that intersect the point\nNearest: gets the items that are at the nearest distance to the point\nIndex: finds item at the same index\nX: find all items that interesct (based on X axis only)\nY: find all items that intersect (based on Y axis only)\n","args":[],"cases":[["Point",[]],["Nearest",[]],["Index",[]],["DataSet",[]],["X",[]],["Y",[]]]},{"name":"PositionMode","comment":" Positioning mode for tooltips\n\nAverage will place the tooltip at the average position of the displayed items\nNearest will place the tooltip at the element closest to the event position\n\n","args":[],"cases":[["PositionModeAverage",[]],["PositionModeNearest",[]]]}],"aliases":[{"name":"Tooltips","comment":" Tooltips are displayed when interacting with charts\n","args":[],"type":"{ enabled : Maybe.Maybe Basics.Bool, mode : Maybe.Maybe Chartjs.Options.Tooltips.Mode, intersect : Maybe.Maybe Basics.Bool, position : Maybe.Maybe Chartjs.Options.Tooltips.PositionMode, backgroundColor : Maybe.Maybe Color.Color, titleFontFamily : Maybe.Maybe String.String, titleFontSize : Maybe.Maybe Basics.Int, titleFontStyle : Maybe.Maybe String.String, titleFontColor : Maybe.Maybe Color.Color, titleSpacing : Maybe.Maybe Basics.Int, titleMarginBottom : Maybe.Maybe Basics.Int, bodyFontFamily : Maybe.Maybe String.String, bodyFontSize : Maybe.Maybe Basics.Int, bodyFontStyle : Maybe.Maybe String.String, bodyFontColor : Maybe.Maybe Color.Color, bodySpacing : Maybe.Maybe Basics.Int, footerFontFamily : Maybe.Maybe String.String, footerFontSize : Maybe.Maybe Basics.Int, footerFontStyle : Maybe.Maybe String.String, footerFontColor : Maybe.Maybe Color.Color, footerSpacing : Maybe.Maybe Basics.Int, footerMarginTop : Maybe.Maybe Basics.Int, xPadding : Maybe.Maybe Basics.Int, yPadding : Maybe.Maybe Basics.Int, caretPadding : Maybe.Maybe Basics.Int, carretSize : Maybe.Maybe Basics.Int, cornerRadius : Maybe.Maybe Basics.Int, multiKeyBackground : Maybe.Maybe Color.Color, displayColors : Maybe.Maybe Basics.Bool, borderColor : Maybe.Maybe Basics.Bool, borderWidth : Maybe.Maybe Basics.Int }"}],"values":[{"name":"defaultTooltips","comment":" Create a blank tooltips object\n","type":"Chartjs.Options.Tooltips.Tooltips"}],"binops":[]}]